/* The following code was generated by JFlex 1.4.1 on 1/11/17 4:07 PM */

/*
 * 11/13/2004
 *
 * BasicTokenMaker.java - Scanner for the Basic programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.tros.jvmbasic.rsyntax;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Basic programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>BasicTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class BasicTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\1\0\1\15\1\10\22\0\1\15\1\35\1\10"+
    "\1\11\1\13\1\33\1\36\1\37\2\27\1\33\1\25\1\37\1\25"+
    "\1\26\1\34\1\4\1\6\1\106\5\6\2\3\1\47\1\37\1\30"+
    "\1\31\1\30\1\37\1\11\1\52\1\74\1\51\1\62\1\17\1\23"+
    "\1\72\1\77\1\57\1\1\1\101\1\22\1\20\1\60\1\65\1\76"+
    "\1\104\1\16\1\56\1\71\1\61\1\67\1\103\1\75\2\1\1\37"+
    "\1\12\1\37\1\32\1\2\1\0\1\54\1\5\1\53\1\64\1\24"+
    "\1\44\1\73\1\40\1\45\1\1\1\102\1\46\1\100\1\63\1\66"+
    "\1\42\1\105\1\55\1\43\1\41\1\7\1\70\1\50\1\21\2\1"+
    "\1\10\1\32\1\10\1\37\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\2\1\1\1\4\1\5"+
    "\1\6\1\7\7\2\1\4\1\1\1\10\1\4\2\1"+
    "\37\2\1\11\1\12\3\11\1\1\2\13\1\3\2\14"+
    "\1\13\1\15\1\13\63\2\1\5\5\2\1\5\24\2"+
    "\2\5\23\2\4\0\1\1\1\14\1\0\2\15\13\2"+
    "\1\5\32\2\1\5\2\2\1\5\16\2\4\0\1\1"+
    "\16\2\2\0\1\16\1\1\6\2\2\0\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\216\0\325\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354"+
    "\0\u039b\0\u03e2\0\u0429\0\u01f1\0\u0470\0\u01f1\0\u04b7\0\u04b7"+
    "\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef"+
    "\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u01f1\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0f41\0\u0f41\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1207\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u1ae7"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c"+
    "\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c"+
    "\0\u0f41\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85"+
    "\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd"+
    "\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5"+
    "\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365"+
    "\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d"+
    "\0\u4365\0\u45e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\24\1\30\1\31\1\10\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\10\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\4\1\65\1\66\1\67\3\4\1\70\2\4"+
    "\1\5\14\71\1\72\23\71\1\73\3\71\1\74\3\71"+
    "\1\75\36\71\10\3\1\0\3\3\2\0\7\3\13\0"+
    "\7\3\1\0\40\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\37\4\3\77\2\5"+
    "\1\77\1\5\1\77\1\0\3\77\2\0\1\77\1\100"+
    "\2\77\1\101\1\102\1\100\1\0\1\103\11\0\4\77"+
    "\1\102\1\77\1\101\1\0\12\77\1\102\1\77\1\102"+
    "\21\77\1\5\3\77\1\104\1\105\1\77\1\105\1\77"+
    "\1\0\3\77\2\0\1\77\1\100\1\77\1\106\1\101"+
    "\1\102\1\100\1\0\1\103\11\0\4\77\1\102\1\77"+
    "\1\101\1\0\12\77\1\102\1\77\1\102\10\77\1\106"+
    "\10\77\1\105\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\3\4\1\107\3\4\1\0\37\4"+
    "\124\0\1\14\71\0\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\1\4\1\110\5\4\13\0\7\4\1\0"+
    "\7\4\1\111\1\112\1\113\3\4\1\114\21\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\10\4\1\112\14\4\1\115\11\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\7\4\1\116\27\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\14\4\1\117\22\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\1\4\1\120\5\4\13\0\7\4\1\0"+
    "\7\4\1\121\5\4\1\122\21\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\123\3\4\1\124\2\4"+
    "\13\0\7\4\1\0\10\4\1\12\4\4\1\125\21\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\3\4"+
    "\1\126\3\4\13\0\7\4\1\0\13\4\1\127\23\4"+
    "\3\0\2\103\1\0\1\103\77\0\1\103\31\0\1\24"+
    "\113\0\1\24\50\0\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\1\4\1\130\1\131\2\4"+
    "\1\132\1\133\1\0\3\4\1\134\12\4\1\135\4\4"+
    "\1\136\13\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\6\4\1\137\13\0\1\140\6\4\1\0\4\4"+
    "\1\141\1\142\10\4\1\12\20\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\6\4\1\143\13\0\6\4"+
    "\1\144\1\0\5\4\1\145\6\4\1\146\1\4\1\147"+
    "\20\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\1\150\1\151\1\152\2\4\1\153\1\4"+
    "\1\0\3\4\1\154\1\155\16\4\1\153\11\4\1\107"+
    "\1\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\6\4\1\156\1\0\5\4\1\157\5\4"+
    "\1\12\2\4\1\107\20\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\4\4\1\12\2\4"+
    "\1\0\13\4\1\160\23\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\6\4\1\161\13\0\5\4\1\162"+
    "\1\4\1\0\16\4\1\163\20\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\4\4\1\164\32\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\4\4\1\165\2\4\13\0\7\4\1\0"+
    "\2\4\1\166\12\4\1\167\11\4\1\170\7\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\6\4\1\171\1\4\1\112\10\4\1\172"+
    "\2\4\1\173\12\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\6\4\1\174\1\0\4\4"+
    "\1\175\11\4\1\176\20\4\1\3\4\4\1\177\2\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\1\4"+
    "\1\200\1\4\1\201\3\4\1\0\13\4\1\127\23\4"+
    "\1\3\6\4\1\153\1\0\1\3\1\76\1\4\2\0"+
    "\6\4\1\202\13\0\7\4\1\0\13\4\1\127\2\4"+
    "\1\203\20\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\1\4\1\204\1\205"+
    "\4\4\1\113\11\4\1\206\1\113\3\4\1\207\1\210"+
    "\4\4\1\125\2\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\5\4\1\12\1\4\13\0\7\4\1\0"+
    "\10\4\1\211\26\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\1\4\1\212\5\4\13\0\7\4\1\0"+
    "\15\4\1\213\21\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\6\4\1\125"+
    "\30\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\1\214\1\215\5\4\13\0\7\4\1\0\2\4\1\216"+
    "\4\4\1\217\27\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\6\4\1\137\13\0\7\4\1\0\16\4"+
    "\1\220\20\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\6\4\1\221\13\0\5\4\1\222\1\4\1\0"+
    "\4\4\1\223\1\224\31\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\1\12\6\4\13\0\7\4\1\0"+
    "\10\4\1\225\26\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\5\4\1\12"+
    "\5\4\1\226\23\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\4\4\1\227\2\4\13\0\7\4\1\0"+
    "\2\4\1\230\16\4\1\231\4\4\1\232\10\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\1\4\1\130\1\131\3\4\1\133\1\0\4\4\1\146"+
    "\32\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\1\233\1\212\5\4\13\0\7\4\1\0\2\4\1\234"+
    "\12\4\1\12\11\4\1\235\7\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\12\1\114\5\4\13\0"+
    "\7\4\1\0\15\4\1\236\21\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\6\4\1\203\13\0\7\4"+
    "\1\0\5\4\1\12\10\4\1\237\20\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\12\4\1\240\24\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\1\241\1\242\2\4\1\243\2\4"+
    "\13\0\7\4\1\0\12\4\1\230\2\4\1\244\21\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\4\4"+
    "\1\227\2\4\13\0\7\4\1\0\1\4\1\245\5\4"+
    "\1\246\5\4\1\247\3\4\1\231\1\250\3\4\1\232"+
    "\10\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\2\4\1\251\34\4\14\71"+
    "\1\0\23\71\1\0\3\71\1\0\3\71\1\0\36\71"+
    "\41\0\1\252\106\0\1\253\3\0\1\254\111\0\1\255"+
    "\36\0\7\3\1\256\1\0\3\3\2\0\7\3\13\0"+
    "\7\3\1\0\37\3\10\77\1\0\3\77\2\0\7\77"+
    "\13\0\7\77\1\0\42\77\2\257\1\77\1\257\1\77"+
    "\1\0\3\77\2\0\7\77\1\260\12\0\7\77\1\0"+
    "\36\77\1\257\3\77\2\103\1\77\1\103\1\77\1\0"+
    "\3\77\2\0\1\77\1\100\3\77\1\102\1\100\13\0"+
    "\4\77\1\102\2\77\1\0\12\77\1\102\1\77\1\102"+
    "\21\77\1\103\3\77\2\104\1\77\1\104\1\77\1\0"+
    "\3\77\2\0\1\77\1\100\3\77\1\102\1\100\1\0"+
    "\1\103\11\0\4\77\1\102\2\77\1\0\12\77\1\102"+
    "\1\77\1\102\21\77\1\104\3\77\1\104\1\105\1\77"+
    "\1\105\1\77\1\0\3\77\2\0\1\77\1\100\2\77"+
    "\1\261\1\102\1\100\1\0\1\103\11\0\4\77\1\102"+
    "\1\77\1\261\1\0\12\77\1\102\1\77\1\102\21\77"+
    "\1\105\3\77\4\262\1\77\1\0\3\77\2\0\1\77"+
    "\1\262\3\77\2\262\13\0\4\77\1\262\2\77\1\0"+
    "\1\77\4\262\5\77\1\262\1\77\1\262\7\77\1\262"+
    "\11\77\1\262\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\5\4\1\12\31\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\2\4"+
    "\1\12\4\4\13\0\7\4\1\0\1\4\1\263\1\112"+
    "\3\4\1\264\12\4\1\265\15\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\22\4\1\266\14\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\12\4\1\12"+
    "\24\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\10\4\1\12\26\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\21\4\1\12\15\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\26\4\1\12\10\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\12\4\1\267"+
    "\24\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\5\4\1\224\31\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\5\4\1\270"+
    "\1\4\13\0\7\4\1\0\10\4\1\12\10\4\1\12"+
    "\15\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\6\4\1\114\30\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\2\4\1\271"+
    "\4\4\13\0\7\4\1\0\2\4\1\112\17\4\1\12"+
    "\14\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\1\4\1\12\5\4\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\2\4\1\272\34\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\12\6\4\13\0\7\4"+
    "\1\0\37\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\2\4\1\12\4\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\14\4\1\12\22\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\4\4\1\273\32\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\6\4\1\144\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\30\4\1\274\6\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\5\4\1\153\1\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\16\4\1\275\20\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\30\4\1\157"+
    "\6\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\5\4\1\276\31\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\3\4\1\203"+
    "\3\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\6\4\1\153\13\0\7\4"+
    "\1\0\37\4\1\3\4\4\1\12\2\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\13\4"+
    "\1\12\23\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\4\4\1\277\32\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\6\4"+
    "\1\300\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\16\4\1\203\20\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\5\4\1\301\1\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\6\4\1\12\1\0\37\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\2\4"+
    "\2\12\3\4\1\0\32\4\1\157\4\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\6\4"+
    "\1\302\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\6\4\1\126\13\0\7\4\1\0\16\4"+
    "\1\303\20\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\6\4\1\304\13\0\7\4\1\0\3\4\1\12"+
    "\33\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\13\4\1\12\23\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\4\4\1\305\1\153\31\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\20\4\1\157\16\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\4\4"+
    "\1\306\32\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\6\4\1\12\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\1\4\1\12\1\307\4\4\1\0\3\4\1\310\14\4"+
    "\1\311\16\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\1\4\1\12\5\4\1\0\13\4"+
    "\1\12\23\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\3\4\1\203\3\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\4\4\1\127\16\4\1\12\4\4"+
    "\1\274\6\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\5\4\1\203\1\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\1\4"+
    "\1\312\5\4\13\0\7\4\1\0\6\4\1\12\30\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\4\4"+
    "\1\230\2\4\13\0\7\4\1\0\37\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\4\4\1\313\2\4"+
    "\13\0\7\4\1\0\6\4\1\12\30\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\1\267\6\4\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\1\4\1\12"+
    "\35\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\6\4\1\12\30\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\6\4\1\314"+
    "\13\0\3\4\1\12\3\4\1\0\37\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\6\4"+
    "\1\146\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\3\4\1\12\2\4\1\315"+
    "\1\0\37\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\3\4\1\12\3\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\3\4\1\12\33\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\1\4"+
    "\1\316\1\4\1\317\3\4\1\0\3\4\1\320\1\127"+
    "\23\4\1\12\6\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\1\4\1\12\5\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\1\113\6\4\13\0\7\4\1\0\2\4\1\321\34\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\17\4\1\123\17\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\1\267\1\115\5\4"+
    "\13\0\7\4\1\0\15\4\1\322\21\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\1\4\1\323\5\4"+
    "\13\0\7\4\1\0\1\4\1\12\35\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\4\4\1\324\2\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\1\4"+
    "\1\325\15\4\1\326\1\4\1\12\4\4\1\327\10\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\25\4\1\114\11\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\1\330\6\4\13\0"+
    "\7\4\1\0\21\4\1\331\15\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\2\4\1\332\34\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\5\4\1\12\1\4\13\0\7\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\21\4\1\333\15\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\2\4\1\12"+
    "\4\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\1\4\1\334"+
    "\5\4\1\0\5\4\1\335\31\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\4\4\1\12"+
    "\2\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\30\4\1\12"+
    "\6\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\1\4\1\336\5\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\4\4\1\337\32\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\4\1\340\5\4\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\6\4\1\341\13\0\7\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\7\4\1\113\27\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\4\4\1\12\2\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\2\4"+
    "\1\342\34\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\4\4\1\243\2\4\13\0\7\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\2\4\1\343\34\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\10\4\1\12\13\4\1\12\12\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\1\4\1\113\5\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\6\4"+
    "\1\344\12\4\1\345\15\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\1\4\1\346\1\4"+
    "\1\347\3\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\1\214\6\4\13\0\7\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\7\4\1\350\27\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\1\4\1\351"+
    "\5\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\15\4\1\114\21\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\6\4\1\12"+
    "\17\4\1\12\2\4\1\123\5\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\15\4\1\352\21\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\2\4\1\271\4\4\13\0\7\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\2\4\1\123\4\4\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\1\276\6\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\7\4"+
    "\1\114\27\4\41\0\1\353\107\0\1\354\112\0\1\355"+
    "\110\0\1\356\36\0\3\3\4\357\1\3\1\0\3\3"+
    "\2\0\1\3\1\357\3\3\2\357\13\0\4\3\1\357"+
    "\2\3\1\0\1\3\4\357\5\3\1\357\1\3\1\357"+
    "\7\3\1\357\11\3\1\357\3\77\2\257\1\77\1\257"+
    "\1\77\1\0\3\77\2\0\5\77\1\102\1\77\13\0"+
    "\4\77\1\102\2\77\1\0\12\77\1\102\1\77\1\102"+
    "\21\77\1\257\3\0\2\257\1\0\1\257\77\0\1\257"+
    "\3\77\4\262\1\77\1\0\3\77\2\0\1\77\1\262"+
    "\2\77\1\261\2\262\13\0\4\77\1\262\1\77\1\261"+
    "\1\0\1\77\4\262\5\77\1\262\1\77\1\262\7\77"+
    "\1\262\11\77\1\262\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\2\4\1\166"+
    "\34\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\21\4\1\360\15\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\11\4\1\361\25\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\27\4\1\270\7\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\12\2\0\7\4\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\21\4\1\267\15\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\4\1\217\5\4\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\6\4\1\362"+
    "\30\4\1\3\4\4\1\12\2\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\6\4\1\222"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\6\4\1\315\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\36\4\1\12\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\3\4\1\157\33\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\32\4"+
    "\1\12\4\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\13\4\1\203\23\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\16\4\1\363\20\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\2\4"+
    "\1\12\4\4\1\0\5\4\1\157\31\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\6\4\1\127\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\6\4\1\157\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\3\4\1\364\3\4\1\0\37\4\1\3\6\4"+
    "\1\203\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\6\4\1\365\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\6\4"+
    "\1\366\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\2\4\1\125\34\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\15\4\1\125"+
    "\21\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\4\4\1\107\32\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\7\4\1\0\16\4\1\107\20\4\1\3\6\4\1\367"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\37\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\1\4\1\370\5\4\1\0\37\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\4\4\1\175\32\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\4\4\1\123\2\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\1\123\6\4\13\0\7\4\1\0"+
    "\26\4\1\12\10\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\1\4\1\112\5\4\13\0\7\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\15\4\1\371\21\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\4\4\1\372"+
    "\2\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\1\4\1\373\5\4\13\0"+
    "\7\4\1\0\37\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\11\4\1\114"+
    "\25\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\2\4\1\374\4\4\13\0\7\4\1\0\37\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\1\233\6\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\33\4"+
    "\1\12\3\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\2\4\1\12\34\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\5\4\1\142\31\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\30\4\1\375\6\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\4\4"+
    "\1\12\32\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\1\12\36\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\1\125\6\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\5\4"+
    "\1\107\31\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\24\4\1\12\12\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\1\4\1\123\35\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\11\4\1\342\25\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\15\4"+
    "\1\12\21\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\16\4\1\12\20\4"+
    "\1\3\6\4\1\273\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\10\4\1\114\26\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\31\4\1\12"+
    "\5\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\4\4\1\313\2\4\13\0\7\4\1\0\37\4\42\0"+
    "\1\376\113\0\1\377\63\0\1\354\110\0\1\u0100\60\0"+
    "\3\3\4\u0101\1\3\1\0\3\3\2\0\1\3\1\u0101"+
    "\3\3\2\u0101\13\0\4\3\1\u0101\2\3\1\0\1\3"+
    "\4\u0101\5\3\1\u0101\1\3\1\u0101\7\3\1\u0101\11\3"+
    "\1\u0101\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\15\4\1\u0102\21\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\1\113\6\4"+
    "\13\0\7\4\1\0\37\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\27\4"+
    "\1\12\7\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\4\4\1\127\32\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\1\12\6\4\1\0\37\4\1\3\6\4\1\u0103"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\37\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\5\4\1\u0104\31\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\7\4"+
    "\13\0\7\4\1\0\5\4\1\153\31\4\1\3\7\4"+
    "\1\0\1\3\1\76\1\4\2\0\7\4\13\0\7\4"+
    "\1\0\16\4\1\u0105\20\4\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\7\4\13\0\7\4\1\0\2\4"+
    "\1\112\34\4\1\3\7\4\1\0\1\3\1\76\1\4"+
    "\2\0\7\4\13\0\7\4\1\0\11\4\1\u0106\25\4"+
    "\1\3\7\4\1\0\1\3\1\76\1\4\2\0\1\u0107"+
    "\6\4\13\0\7\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\2\4\1\230\34\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\4\4\1\146"+
    "\32\4\43\0\1\354\3\0\1\377\73\0\1\u0108\53\0"+
    "\1\u0100\1\u0109\5\u0100\1\0\1\u0109\1\0\1\u0100\2\0"+
    "\7\u0100\3\u0109\1\0\1\u0109\1\0\1\u0109\1\u0100\3\u0109"+
    "\7\u0100\1\u0109\37\u0100\3\3\4\u010a\1\3\1\0\3\3"+
    "\2\0\1\3\1\u010a\3\3\2\u010a\13\0\4\3\1\u010a"+
    "\2\3\1\0\1\3\4\u010a\5\3\1\u010a\1\3\1\u010a"+
    "\7\3\1\u010a\11\3\1\u010a\1\3\7\4\1\0\1\3"+
    "\1\76\1\4\2\0\1\123\6\4\13\0\7\4\1\0"+
    "\37\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\14\4\1\157\22\4\1\3"+
    "\7\4\1\0\1\3\1\76\1\4\2\0\7\4\13\0"+
    "\3\4\1\157\3\4\1\0\37\4\1\3\7\4\1\0"+
    "\1\3\1\76\1\4\2\0\7\4\13\0\7\4\1\0"+
    "\5\4\1\157\31\4\1\3\7\4\1\0\1\3\1\76"+
    "\1\4\2\0\7\4\13\0\7\4\1\0\12\4\1\123"+
    "\24\4\1\3\7\4\1\0\1\3\1\76\1\4\2\0"+
    "\7\4\13\0\7\4\1\0\6\4\1\123\30\4\34\0"+
    "\1\u0100\52\0\3\3\4\4\1\3\1\0\3\3\2\0"+
    "\1\3\1\4\3\3\2\4\13\0\4\3\1\4\2\3"+
    "\1\0\1\3\4\4\5\3\1\4\1\3\1\4\7\3"+
    "\1\4\11\3\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17963];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\1\11\2\1\1\11\10\1\1\11\1\1"+
    "\1\11\43\1\1\11\157\1\4\0\2\1\1\0\72\1"+
    "\4\0\17\1\2\0\10\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public BasicTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BasicTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BasicTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addToken(Token.RESERVED_WORD);
          }
        case 15: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 16: break;
        case 12: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 17: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 18: break;
        case 14: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 19: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 20: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 21: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 22: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 23: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 24: break;
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 26: break;
        case 9: 
          { 
          }
        case 27: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 267: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 268: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
