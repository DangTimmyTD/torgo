/* The following code was generated by JFlex 1.4.1 on 1/11/17 10:33 AM */

/*
 * 11/13/2004
 *
 * LogoTokenMaker.java - Scanner for the Logo programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.tros.logo.rsyntax;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Logo programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>LogoTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class LogoTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\1\0\1\14\1\10\22\0\1\14\1\33\1\10"+
    "\1\11\1\1\1\30\1\34\1\35\2\24\1\30\1\22\1\35\1\22"+
    "\1\23\1\32\1\4\7\6\2\3\1\46\1\15\1\25\1\26\1\31"+
    "\1\35\1\11\3\5\1\20\1\21\1\20\5\1\1\17\13\1\1\16"+
    "\2\1\1\35\1\12\1\35\1\27\1\2\1\0\1\52\1\55\1\57"+
    "\1\50\1\45\1\42\1\54\1\36\1\43\1\1\1\60\1\44\1\62"+
    "\1\53\1\56\1\40\1\1\1\51\1\41\1\37\1\7\1\61\1\47"+
    "\1\65\1\64\1\63\1\10\1\27\1\10\1\35\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\4\1\1\1\10\2\4\2\1\16\2\1\11"+
    "\1\12\3\11\1\1\1\13\1\3\1\14\1\13\1\14"+
    "\1\13\1\15\1\13\1\4\2\0\1\16\7\2\1\16"+
    "\21\2\4\0\1\1\1\14\1\0\2\15\11\2\1\16"+
    "\16\2\4\0\1\1\16\2\1\16\2\2\2\0\1\17"+
    "\1\1\14\2\1\16\1\2\2\0\1\1\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\154"+
    "\0\u0144\0\u017a\0\u0144\0\u01b0\0\u01e6\0\u0144\0\u021c\0\u0252"+
    "\0\u01b0\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u0144\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06c0"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0144\0\u01b0"+
    "\0\u0804\0\242\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u06c0\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1950\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\4\1\7"+
    "\1\3\1\10\1\11\1\12\1\13\4\4\1\14\1\15"+
    "\1\16\1\17\3\14\1\20\1\14\1\21\1\22\1\7"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\7\1\4\1\33\1\34\2\4\1\35\1\36\1\4"+
    "\1\37\2\4\1\40\3\4\13\41\1\42\22\41\1\43"+
    "\3\41\1\44\4\41\1\45\16\41\10\3\1\0\2\3"+
    "\3\0\4\3\14\0\10\3\1\0\20\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\17\4"+
    "\3\47\2\5\1\47\1\5\1\47\1\0\2\47\3\0"+
    "\1\47\1\50\1\51\1\52\1\0\1\53\12\0\4\47"+
    "\1\51\1\47\1\50\1\52\1\0\1\47\1\51\20\47"+
    "\1\54\1\55\1\47\1\55\1\47\1\0\2\47\3\0"+
    "\1\56\1\50\1\51\1\52\1\0\1\53\12\0\4\47"+
    "\1\51\1\47\1\50\1\52\1\0\1\47\1\51\14\47"+
    "\1\56\102\0\1\12\77\0\1\57\42\0\2\53\1\0"+
    "\1\53\104\0\1\60\1\57\65\0\1\57\2\0\1\61"+
    "\62\0\1\57\5\0\1\57\31\0\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\1\4\1\62\3\4"+
    "\1\63\2\4\1\0\7\4\1\64\7\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\7\4\1\62\7\4\1\3\6\4\1\62\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\6\4\1\65\1\66\1\0"+
    "\1\4\1\62\1\67\1\70\4\4\1\62\6\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\1\71"+
    "\1\72\5\4\1\73\1\0\17\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\1\4"+
    "\1\62\5\4\1\74\7\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\1\4\1\75\2\4\1\62"+
    "\3\4\1\0\17\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\1\4\1\62\5\4\1\76\1\0"+
    "\3\4\1\77\3\4\1\100\7\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\4\4"+
    "\1\101\12\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\3\4\1\62\4\4\1\0\2\4\1\102"+
    "\14\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\1\4\1\62\3\4\1\103\1\4\1\104\1\0"+
    "\3\4\1\105\13\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\7\4\1\106\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\3\4\1\107\3\4\1\110\1\4\1\62\5\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\3\4\1\62\2\4\1\111\1\4\1\0\3\4\1\112"+
    "\4\4\1\62\6\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\3\4\1\113\13\4"+
    "\13\41\1\0\22\41\1\0\3\41\1\0\4\41\1\0"+
    "\16\41\37\0\1\114\65\0\1\115\3\0\1\116\71\0"+
    "\1\117\16\0\7\3\1\120\1\0\2\3\3\0\4\3"+
    "\14\0\10\3\1\0\17\3\10\47\1\0\2\47\3\0"+
    "\4\47\14\0\10\47\1\0\22\47\2\121\1\47\1\121"+
    "\1\47\1\0\2\47\3\0\4\47\1\122\13\0\10\47"+
    "\1\0\22\47\2\53\1\47\1\53\1\47\1\0\2\47"+
    "\3\0\2\47\1\51\1\52\14\0\4\47\1\51\2\47"+
    "\1\52\1\0\1\47\1\51\20\47\2\54\1\47\1\54"+
    "\1\47\1\0\2\47\3\0\2\47\1\51\1\52\1\0"+
    "\1\53\12\0\4\47\1\51\2\47\1\52\1\0\1\47"+
    "\1\51\20\47\1\54\1\55\1\47\1\55\1\47\1\0"+
    "\2\47\3\0\1\47\1\123\1\51\1\52\1\0\1\53"+
    "\12\0\4\47\1\51\1\47\1\123\1\52\1\0\1\47"+
    "\1\51\20\47\4\124\1\47\1\0\2\47\3\0\2\47"+
    "\2\124\14\0\4\47\1\124\2\47\1\124\1\0\1\47"+
    "\1\124\1\47\1\124\2\47\1\124\1\47\1\124\6\47"+
    "\26\0\1\57\2\0\1\60\34\0\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\1\4"+
    "\1\125\15\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\13\4\1\126\3\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\3\4\1\127\13\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\4\4\1\130"+
    "\12\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\5\4\1\131\2\4\1\0\17\4\1\3\6\4"+
    "\1\132\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\7\4\1\133\7\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\7\4\1\134\7\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\1\4\1\135\6\4\1\0"+
    "\17\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\2\4\1\136\1\4\1\137\12\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\3\4\1\140\13\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\4\4\1\141\3\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\6\4\1\142\10\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\10\4\1\143\6\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\1\4\1\62"+
    "\15\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\3\4\1\144\13\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\5\4\1\145\11\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\2\4\1\146\5\4\1\0\17\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\4\4\1\147\12\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\1\4\1\150\6\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\10\4\1\151\6\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\6\4"+
    "\1\152\1\4\1\0\17\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\3\4\1\62\3\4\1\153"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\4\4\1\154\12\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\11\4\1\126\5\4\37\0\1\155\66\0\1\156"+
    "\71\0\1\157\70\0\1\160\16\0\3\3\4\161\1\3"+
    "\1\0\2\3\3\0\2\3\2\161\14\0\4\3\1\161"+
    "\2\3\1\161\1\0\1\3\1\161\1\3\1\161\2\3"+
    "\1\161\1\3\1\161\6\3\3\47\2\121\1\47\1\121"+
    "\1\47\1\0\2\47\3\0\2\47\1\51\1\47\14\0"+
    "\4\47\1\51\3\47\1\0\1\47\1\51\15\47\3\0"+
    "\2\121\1\0\1\121\57\0\3\47\4\124\1\47\1\0"+
    "\2\47\3\0\1\47\1\123\2\124\14\0\4\47\1\124"+
    "\1\47\1\123\1\124\1\0\1\47\1\124\1\47\1\124"+
    "\2\47\1\124\1\47\1\124\6\47\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\7\4\1\162\1\0"+
    "\17\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\7\4\1\62\1\0\17\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\5\4\1\163\2\4"+
    "\1\0\17\4\1\3\6\4\1\134\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\1\4\1\164\6\4"+
    "\1\165\6\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\4\4\1\141\12\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\3\4"+
    "\1\126\4\4\1\0\17\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\1\162\16\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\2\4\1\62\5\4\1\0\17\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\16\4"+
    "\1\166\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\1\167\16\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\1\4\1\170\6\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\6\4\1\171\1\4\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\1\4"+
    "\1\62\6\4\1\0\17\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\7\4\1\172\1\0\17\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\3\4\1\173\13\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\1\174"+
    "\16\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\1\141\7\4\1\0\17\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\7\4\1\175\1\0"+
    "\17\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\1\4\1\176\15\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\3\4\1\177\11\4\2\62\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\11\4\1\136"+
    "\5\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\1\4\1\200\15\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\3\4\1\201\13\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\12\4\1\202\4\4"+
    "\40\0\1\203\73\0\1\204\64\0\1\156\43\0\1\205"+
    "\42\0\3\3\4\206\1\3\1\0\2\3\3\0\2\3"+
    "\2\206\14\0\4\3\1\206\2\3\1\206\1\0\1\3"+
    "\1\206\1\3\1\206\2\3\1\206\1\3\1\206\7\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\1\4"+
    "\1\207\6\4\1\0\17\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\4\4\1\62"+
    "\12\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\7\4\1\210\7\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\7\4\1\211\7\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\15\4\1\62\1\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\3\4\1\212\13\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\3\4\1\213\4\4"+
    "\1\0\4\4\1\214\12\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\5\4\1\215\2\4\1\0"+
    "\17\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\6\4\1\62\1\4\1\0\17\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\6\4\1\216"+
    "\1\4\1\0\17\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\3\4\1\217\4\4\1\0\17\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\3\4\1\141\13\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\7\4"+
    "\1\220\7\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\4\4\1\221\12\4\1\3"+
    "\1\4\1\222\5\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\17\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\2\4\1\223"+
    "\14\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\3\4\1\224\13\4\41\0\1\156"+
    "\4\0\1\204\51\0\1\225\34\0\1\205\1\226\5\205"+
    "\1\0\1\226\3\0\1\226\4\205\3\226\1\0\1\226"+
    "\1\0\1\226\1\0\1\205\3\226\10\205\1\226\17\205"+
    "\3\3\4\227\1\3\1\0\2\3\3\0\2\3\2\227"+
    "\14\0\4\3\1\227\2\3\1\227\1\0\1\3\1\227"+
    "\1\3\1\227\2\3\1\227\1\3\1\227\7\3\6\4"+
    "\1\230\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\1\163\16\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\6\4\1\231"+
    "\1\4\1\0\17\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\2\4\1\101\14\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\1\4\1\232\3\4\1\233\2\4\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\3\4\1\64\13\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\10\4\1\62"+
    "\6\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\13\4\1\40\3\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\1\4\1\234"+
    "\6\4\1\0\17\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\10\4\1\0\13\4\1\62\3\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\5\4\1\235\11\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\5\4\1\236\2\4"+
    "\1\0\17\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\3\4\1\237\4\4\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\3\4"+
    "\1\240\4\4\1\0\17\4\32\0\1\205\33\0\3\3"+
    "\4\4\1\3\1\0\2\3\3\0\2\3\2\4\14\0"+
    "\4\3\1\4\2\3\1\4\1\0\1\3\1\4\1\3"+
    "\1\4\2\3\1\4\1\3\1\4\7\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\2\4"+
    "\1\241\14\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\10\4\1\0\7\4\1\242\7\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\15\4\1\235\1\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\10\4\1\0\14\4\1\126"+
    "\2\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\2\4\1\243\14\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\6\4\1\126"+
    "\1\4\1\0\17\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\1\4\1\75\6\4\1\0\17\4"+
    "\1\3\7\4\1\0\1\3\1\46\3\0\4\4\14\0"+
    "\10\4\1\0\10\4\1\244\6\4\1\3\7\4\1\0"+
    "\1\3\1\46\3\0\4\4\14\0\10\4\1\0\10\4"+
    "\1\165\6\4\1\3\7\4\1\0\1\3\1\46\3\0"+
    "\4\4\14\0\1\4\1\235\6\4\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\2\4\1\62\14\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\5\4\1\245\2\4\1\0"+
    "\17\4\1\3\7\4\1\0\1\3\1\46\3\0\4\4"+
    "\14\0\10\4\1\0\2\4\1\246\14\4\1\3\7\4"+
    "\1\0\1\3\1\46\3\0\4\4\14\0\10\4\1\0"+
    "\4\4\1\247\12\4\1\3\7\4\1\0\1\3\1\46"+
    "\3\0\4\4\14\0\7\4\1\250\1\0\17\4\1\3"+
    "\7\4\1\0\1\3\1\46\3\0\4\4\14\0\10\4"+
    "\1\0\5\4\1\62\11\4\1\3\7\4\1\0\1\3"+
    "\1\46\3\0\4\4\14\0\7\4\1\163\1\0\17\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\23\1\1\11\14\1\1\11\2\0\32\1\4\0"+
    "\2\1\1\0\32\1\4\0\22\1\2\0\20\1\2\0"+
    "\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LogoTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LogoTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LogoTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


     
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 16: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 17: break;
        case 12: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 18: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 19: break;
        case 15: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 20: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 21: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 22: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 23: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 24: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 25: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 26: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 28: break;
        case 9: 
          { 
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 169: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 170: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
